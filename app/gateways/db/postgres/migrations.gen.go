// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_initialize_schema.down.sql (243B)
// migrations/000001_initialize_schema.up.sql (852B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initialize_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xc8\x4c\xa9\x88\x4f\xcd\x2b\x29\xca\x4c\x2d\x8e\x4f\x4c\x4e\xce\x2f\xcd\x2b\x89\x4f\xce\x49\x2c\x2e\xb6\x26\xa4\x2a\xbd\x28\xbf\xb4\x80\xa0\xaa\xe2\xd2\x24\xe2\x14\x66\xa6\xc0\x1c\x16\xe2\xe8\xe4\xe3\xaa\x00\x95\x87\xea\x0b\x89\x0c\x70\x55\x50\xc8\x2f\x48\x2d\x4a\x2c\xc9\xcc\xcf\x8b\x2f\xa9\x2c\x48\x45\x91\x42\x73\x3b\x97\xb3\xbf\xaf\xaf\x67\x88\x35\x17\x20\x00\x00\xff\xff\x23\x79\x57\x99\xf3\x00\x00\x00")

func _000001_initialize_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initialize_schemaDownSql,
		"000001_initialize_schema.down.sql",
	)
}

func _000001_initialize_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initialize_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initialize_schema.down.sql", size: 243, mode: os.FileMode(0644), modTime: time.Unix(1607956577, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xd, 0x51, 0x66, 0xa, 0x6d, 0xbd, 0x61, 0x32, 0xd7, 0xf5, 0xef, 0xfb, 0x1e, 0x97, 0x28, 0xeb, 0xde, 0x74, 0x5, 0x67, 0x48, 0x20, 0xaa, 0xa3, 0x6a, 0x9e, 0xc7, 0x71, 0xd8, 0x80, 0x17}}
	return a, nil
}

var __000001_initialize_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8e\x82\x30\x10\x86\xcf\xf2\x14\x73\x53\x13\xdf\xc0\x13\x62\x63\x9a\x48\x31\x50\x12\x77\x2f\x4d\xa5\xdd\x4d\xb3\x58\xd8\xb6\x6c\xe4\xed\x37\x54\x21\x60\xd8\xac\x9c\x9a\xcc\xc7\x37\x33\xff\xec\xd0\x01\x93\x6d\x10\x44\x29\x0a\x29\x02\xfa\x76\x42\xc0\x8b\xa2\x6a\xb4\x63\x45\xc9\xad\x85\x30\x03\x44\xf2\x18\x56\xc1\x62\x59\x2a\x7e\x51\xa5\x72\xed\x72\x13\x2c\x96\xdc\x5a\xe9\xac\x7f\x2a\x5d\x54\x57\xe9\x9f\xf2\x56\x4b\x6d\x1f\xef\xef\xa6\x83\x83\xf5\x53\x87\xaa\x96\x86\x3b\x55\x69\xe6\xda\x5a\x4e\x5a\x08\x79\x51\xce\xff\x5c\x18\x29\x94\x9b\xfe\x1c\xee\x8e\x08\xa4\x76\x46\x49\xdb\xe1\x4a\xc0\xf4\xcb\x73\xbc\x87\xda\xa8\x2b\x37\x2d\x7c\xc9\x76\x13\x2c\xa6\xeb\x00\x40\x18\x45\x49\x4e\x28\x8b\x8e\x61\x96\x81\xae\x1c\xe8\xa6\x2c\x47\xe4\xa7\xa9\x9a\xba\x23\x29\x3a\xd3\x39\xc0\x36\x97\x3b\xf3\x17\x30\xcc\xf5\x0c\x0c\x9b\xf7\x03\x27\x27\x94\x86\x14\x27\x84\xf9\x64\xc6\xae\x6b\xa7\x1a\xed\x86\xc9\x44\xf5\x23\x8d\x1d\x89\x00\x76\xf8\xf0\x84\x38\xc3\xb5\xe5\x85\x4f\xda\x8f\xe4\xe3\x19\x01\x85\x91\xdc\x49\xc1\x78\xdf\x87\xe2\x18\x65\x34\x8c\x4f\xf4\x7d\xe0\x40\xc8\x0f\xde\x94\x0e\xa2\x3c\x4d\x11\xa1\x6c\x80\xc6\xb7\xc1\x64\x8f\xce\xa0\xc4\x8d\x3d\xee\xc3\xa6\xc1\x27\xa4\x3f\xdc\x6a\x52\x58\x6f\xff\x37\xdc\xc3\x9e\x31\xf8\xc2\x2b\x86\xe1\x62\x33\x92\xbe\xf6\x8a\x47\x89\x39\x83\x12\x3e\x88\x24\x8e\x31\xdd\x06\xbf\x01\x00\x00\xff\xff\xd4\x30\xa6\x73\x54\x03\x00\x00")

func _000001_initialize_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initialize_schemaUpSql,
		"000001_initialize_schema.up.sql",
	)
}

func _000001_initialize_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initialize_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initialize_schema.up.sql", size: 852, mode: os.FileMode(0644), modTime: time.Unix(1607956577, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0x74, 0xde, 0x7d, 0xe5, 0xee, 0x48, 0x68, 0xdb, 0xd8, 0x25, 0xbc, 0x50, 0x24, 0xb, 0xe8, 0x73, 0x7b, 0xaa, 0x79, 0x3d, 0x2a, 0x71, 0x33, 0xff, 0xde, 0x87, 0xc6, 0xe3, 0xeb, 0x8, 0xd8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initialize_schema.down.sql": _000001_initialize_schemaDownSql,
	"000001_initialize_schema.up.sql":   _000001_initialize_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initialize_schema.down.sql": {_000001_initialize_schemaDownSql, map[string]*bintree{}},
	"000001_initialize_schema.up.sql":   {_000001_initialize_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
