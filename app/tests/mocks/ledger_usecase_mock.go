// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/stone-co/the-amazing-ledger/app/domain"
	"github.com/stone-co/the-amazing-ledger/app/domain/entities"
	"github.com/stone-co/the-amazing-ledger/app/domain/vos"
	"sync"
)

// Ensure, that UseCaseMock does implement domain.UseCase.
// If this is not the case, regenerate this file with moq.
var _ domain.UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of domain.UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked domain.UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateTransactionFunc: func(contextMoqParam context.Context, transaction entities.Transaction) error {
// 				panic("mock out the CreateTransaction method")
// 			},
// 			GetAccountBalanceFunc: func(contextMoqParam context.Context, accountPath vos.AccountPath) (vos.AccountBalance, error) {
// 				panic("mock out the GetAccountBalance method")
// 			},
// 			GetAccountHistoryFunc: func(contextMoqParam context.Context, accountPath vos.AccountPath, fn func(vos.EntryHistory) error) error {
// 				panic("mock out the GetAccountHistory method")
// 			},
// 			GetAnalyticalDataFunc: func(contextMoqParam context.Context, accountQuery vos.AccountQuery, fn func(vos.Statement) error) error {
// 				panic("mock out the GetAnalyticalData method")
// 			},
// 			QueryAggregatedBalanceFunc: func(contextMoqParam context.Context, accountQuery vos.AccountQuery) (vos.QueryBalance, error) {
// 				panic("mock out the QueryAggregatedBalance method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires domain.UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateTransactionFunc mocks the CreateTransaction method.
	CreateTransactionFunc func(contextMoqParam context.Context, transaction entities.Transaction) error

	// GetAccountBalanceFunc mocks the GetAccountBalance method.
	GetAccountBalanceFunc func(contextMoqParam context.Context, accountPath vos.AccountPath) (vos.AccountBalance, error)

	// GetAccountHistoryFunc mocks the GetAccountHistory method.
	GetAccountHistoryFunc func(contextMoqParam context.Context, accountPath vos.AccountPath, fn func(vos.EntryHistory) error) error

	// GetAnalyticalDataFunc mocks the GetAnalyticalData method.
	GetAnalyticalDataFunc func(contextMoqParam context.Context, accountQuery vos.AccountQuery, fn func(vos.Statement) error) error

	// QueryAggregatedBalanceFunc mocks the QueryAggregatedBalance method.
	QueryAggregatedBalanceFunc func(contextMoqParam context.Context, accountQuery vos.AccountQuery) (vos.QueryBalance, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransaction holds details about calls to the CreateTransaction method.
		CreateTransaction []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Transaction is the transaction argument value.
			Transaction entities.Transaction
		}
		// GetAccountBalance holds details about calls to the GetAccountBalance method.
		GetAccountBalance []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountPath is the accountPath argument value.
			AccountPath vos.AccountPath
		}
		// GetAccountHistory holds details about calls to the GetAccountHistory method.
		GetAccountHistory []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountPath is the accountPath argument value.
			AccountPath vos.AccountPath
			// Fn is the fn argument value.
			Fn func(vos.EntryHistory) error
		}
		// GetAnalyticalData holds details about calls to the GetAnalyticalData method.
		GetAnalyticalData []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountQuery is the accountQuery argument value.
			AccountQuery vos.AccountQuery
			// Fn is the fn argument value.
			Fn func(vos.Statement) error
		}
		// QueryAggregatedBalance holds details about calls to the QueryAggregatedBalance method.
		QueryAggregatedBalance []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountQuery is the accountQuery argument value.
			AccountQuery vos.AccountQuery
		}
	}
	lockCreateTransaction      sync.RWMutex
	lockGetAccountBalance      sync.RWMutex
	lockGetAccountHistory      sync.RWMutex
	lockGetAnalyticalData      sync.RWMutex
	lockQueryAggregatedBalance sync.RWMutex
}

// CreateTransaction calls CreateTransactionFunc.
func (mock *UseCaseMock) CreateTransaction(contextMoqParam context.Context, transaction entities.Transaction) error {
	if mock.CreateTransactionFunc == nil {
		panic("UseCaseMock.CreateTransactionFunc: method is nil but UseCase.CreateTransaction was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Transaction     entities.Transaction
	}{
		ContextMoqParam: contextMoqParam,
		Transaction:     transaction,
	}
	mock.lockCreateTransaction.Lock()
	mock.calls.CreateTransaction = append(mock.calls.CreateTransaction, callInfo)
	mock.lockCreateTransaction.Unlock()
	return mock.CreateTransactionFunc(contextMoqParam, transaction)
}

// CreateTransactionCalls gets all the calls that were made to CreateTransaction.
// Check the length with:
//     len(mockedUseCase.CreateTransactionCalls())
func (mock *UseCaseMock) CreateTransactionCalls() []struct {
	ContextMoqParam context.Context
	Transaction     entities.Transaction
} {
	var calls []struct {
		ContextMoqParam context.Context
		Transaction     entities.Transaction
	}
	mock.lockCreateTransaction.RLock()
	calls = mock.calls.CreateTransaction
	mock.lockCreateTransaction.RUnlock()
	return calls
}

// GetAccountBalance calls GetAccountBalanceFunc.
func (mock *UseCaseMock) GetAccountBalance(contextMoqParam context.Context, accountPath vos.AccountPath) (vos.AccountBalance, error) {
	if mock.GetAccountBalanceFunc == nil {
		panic("UseCaseMock.GetAccountBalanceFunc: method is nil but UseCase.GetAccountBalance was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountPath     vos.AccountPath
	}{
		ContextMoqParam: contextMoqParam,
		AccountPath:     accountPath,
	}
	mock.lockGetAccountBalance.Lock()
	mock.calls.GetAccountBalance = append(mock.calls.GetAccountBalance, callInfo)
	mock.lockGetAccountBalance.Unlock()
	return mock.GetAccountBalanceFunc(contextMoqParam, accountPath)
}

// GetAccountBalanceCalls gets all the calls that were made to GetAccountBalance.
// Check the length with:
//     len(mockedUseCase.GetAccountBalanceCalls())
func (mock *UseCaseMock) GetAccountBalanceCalls() []struct {
	ContextMoqParam context.Context
	AccountPath     vos.AccountPath
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountPath     vos.AccountPath
	}
	mock.lockGetAccountBalance.RLock()
	calls = mock.calls.GetAccountBalance
	mock.lockGetAccountBalance.RUnlock()
	return calls
}

// GetAccountHistory calls GetAccountHistoryFunc.
func (mock *UseCaseMock) GetAccountHistory(contextMoqParam context.Context, accountPath vos.AccountPath, fn func(vos.EntryHistory) error) error {
	if mock.GetAccountHistoryFunc == nil {
		panic("UseCaseMock.GetAccountHistoryFunc: method is nil but UseCase.GetAccountHistory was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountPath     vos.AccountPath
		Fn              func(vos.EntryHistory) error
	}{
		ContextMoqParam: contextMoqParam,
		AccountPath:     accountPath,
		Fn:              fn,
	}
	mock.lockGetAccountHistory.Lock()
	mock.calls.GetAccountHistory = append(mock.calls.GetAccountHistory, callInfo)
	mock.lockGetAccountHistory.Unlock()
	return mock.GetAccountHistoryFunc(contextMoqParam, accountPath, fn)
}

// GetAccountHistoryCalls gets all the calls that were made to GetAccountHistory.
// Check the length with:
//     len(mockedUseCase.GetAccountHistoryCalls())
func (mock *UseCaseMock) GetAccountHistoryCalls() []struct {
	ContextMoqParam context.Context
	AccountPath     vos.AccountPath
	Fn              func(vos.EntryHistory) error
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountPath     vos.AccountPath
		Fn              func(vos.EntryHistory) error
	}
	mock.lockGetAccountHistory.RLock()
	calls = mock.calls.GetAccountHistory
	mock.lockGetAccountHistory.RUnlock()
	return calls
}

// GetAnalyticalData calls GetAnalyticalDataFunc.
func (mock *UseCaseMock) GetAnalyticalData(contextMoqParam context.Context, accountQuery vos.AccountQuery, fn func(vos.Statement) error) error {
	if mock.GetAnalyticalDataFunc == nil {
		panic("UseCaseMock.GetAnalyticalDataFunc: method is nil but UseCase.GetAnalyticalData was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountQuery    vos.AccountQuery
		Fn              func(vos.Statement) error
	}{
		ContextMoqParam: contextMoqParam,
		AccountQuery:    accountQuery,
		Fn:              fn,
	}
	mock.lockGetAnalyticalData.Lock()
	mock.calls.GetAnalyticalData = append(mock.calls.GetAnalyticalData, callInfo)
	mock.lockGetAnalyticalData.Unlock()
	return mock.GetAnalyticalDataFunc(contextMoqParam, accountQuery, fn)
}

// GetAnalyticalDataCalls gets all the calls that were made to GetAnalyticalData.
// Check the length with:
//     len(mockedUseCase.GetAnalyticalDataCalls())
func (mock *UseCaseMock) GetAnalyticalDataCalls() []struct {
	ContextMoqParam context.Context
	AccountQuery    vos.AccountQuery
	Fn              func(vos.Statement) error
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountQuery    vos.AccountQuery
		Fn              func(vos.Statement) error
	}
	mock.lockGetAnalyticalData.RLock()
	calls = mock.calls.GetAnalyticalData
	mock.lockGetAnalyticalData.RUnlock()
	return calls
}

// QueryAggregatedBalance calls QueryAggregatedBalanceFunc.
func (mock *UseCaseMock) QueryAggregatedBalance(contextMoqParam context.Context, accountQuery vos.AccountQuery) (vos.QueryBalance, error) {
	if mock.QueryAggregatedBalanceFunc == nil {
		panic("UseCaseMock.QueryAggregatedBalanceFunc: method is nil but UseCase.QueryAggregatedBalance was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountQuery    vos.AccountQuery
	}{
		ContextMoqParam: contextMoqParam,
		AccountQuery:    accountQuery,
	}
	mock.lockQueryAggregatedBalance.Lock()
	mock.calls.QueryAggregatedBalance = append(mock.calls.QueryAggregatedBalance, callInfo)
	mock.lockQueryAggregatedBalance.Unlock()
	return mock.QueryAggregatedBalanceFunc(contextMoqParam, accountQuery)
}

// QueryAggregatedBalanceCalls gets all the calls that were made to QueryAggregatedBalance.
// Check the length with:
//     len(mockedUseCase.QueryAggregatedBalanceCalls())
func (mock *UseCaseMock) QueryAggregatedBalanceCalls() []struct {
	ContextMoqParam context.Context
	AccountQuery    vos.AccountQuery
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountQuery    vos.AccountQuery
	}
	mock.lockQueryAggregatedBalance.RLock()
	calls = mock.calls.QueryAggregatedBalance
	mock.lockQueryAggregatedBalance.RUnlock()
	return calls
}
