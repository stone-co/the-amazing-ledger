// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/stone-co/the-amazing-ledger/app/domain"
	"sync"
)

// Ensure, that InstrumentationMock does implement domain.Instrumentation.
// If this is not the case, regenerate this file with moq.
var _ domain.Instrumentation = &InstrumentationMock{}

// InstrumentationMock is a mock implementation of domain.Instrumentation.
//
// 	func TestSomethingThatUsesInstrumentation(t *testing.T) {
//
// 		// make and configure a mocked domain.Instrumentation
// 		mockedInstrumentation := &InstrumentationMock{
// 			LogFunc: func(ctx context.Context, value string)  {
// 				panic("mock out the Log method")
// 			},
// 		}
//
// 		// use mockedInstrumentation in code that requires domain.Instrumentation
// 		// and then make assertions.
//
// 	}
type InstrumentationMock struct {
	// LogFunc mocks the Log method.
	LogFunc func(ctx context.Context, value string)

	// calls tracks calls to the methods.
	calls struct {
		// Log holds details about calls to the Log method.
		Log []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Value is the value argument value.
			Value string
		}
	}
	lockLog sync.RWMutex
}

// Log calls LogFunc.
func (mock *InstrumentationMock) Log(ctx context.Context, value string) {
	if mock.LogFunc == nil {
		panic("InstrumentationMock.LogFunc: method is nil but Instrumentation.Log was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Value string
	}{
		Ctx:   ctx,
		Value: value,
	}
	mock.lockLog.Lock()
	mock.calls.Log = append(mock.calls.Log, callInfo)
	mock.lockLog.Unlock()
	mock.LogFunc(ctx, value)
}

// LogCalls gets all the calls that were made to Log.
// Check the length with:
//     len(mockedInstrumentation.LogCalls())
func (mock *InstrumentationMock) LogCalls() []struct {
	Ctx   context.Context
	Value string
} {
	var calls []struct {
		Ctx   context.Context
		Value string
	}
	mock.lockLog.RLock()
	calls = mock.calls.Log
	mock.lockLog.RUnlock()
	return calls
}
