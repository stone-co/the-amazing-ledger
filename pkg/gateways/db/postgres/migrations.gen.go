// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_initialize_schema.down.sql (110B)
// migrations/000001_initialize_schema.up.sql (943B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initialize_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcd\x2b\x29\xca\x4c\x2d\xb6\x86\x8a\x45\x06\xb8\x2a\x28\xe4\x17\xa4\x16\x25\x96\x64\xe6\xe7\xc5\x97\x54\x16\xa4\x5a\x23\x2b\x4f\x4c\x4e\xce\x2f\xcd\x2b\x41\x55\x0f\x15\x84\xaa\xe6\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x00\xaf\xc8\x35\x6e\x00\x00\x00")

func _000001_initialize_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initialize_schemaDownSql,
		"000001_initialize_schema.down.sql",
	)
}

func _000001_initialize_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initialize_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initialize_schema.down.sql", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1603896993, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x4a, 0x6d, 0xf3, 0xd4, 0x4f, 0x9f, 0xb1, 0xe, 0xa5, 0x3d, 0x3d, 0x9, 0xf9, 0x9c, 0x77, 0x57, 0x4c, 0x8f, 0xbb, 0x2c, 0x8e, 0xcc, 0x64, 0x72, 0x6f, 0xd2, 0x6a, 0x64, 0x5a, 0x1d, 0xed}}
	return a, nil
}

var __000001_initialize_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcf\x8e\x9b\x30\x10\xc6\xcf\xf8\x29\xe6\x96\x56\xca\x1b\xec\xc9\x61\xdd\x95\x55\xfe\x44\xc4\x48\x4d\x2f\x91\x03\xd3\xca\x2a\x18\x6a\x9b\xb6\xbc\x7d\x85\x59\x90\x61\xb3\x87\xf5\xc9\x68\x7e\x7c\xfe\xe6\x9b\x39\xb1\x17\x9e\x3d\x11\x12\x17\x8c\x0a\x06\xe2\x7a\x66\x20\xab\xaa\x1b\xb4\xbb\xb9\xb1\x47\xa0\x17\x60\x59\x99\xc2\x27\x12\x1d\xa4\xb5\xe8\x0e\x47\x12\x1d\x1a\x25\xef\xaa\x51\x6e\xf4\x5f\x4a\x57\x5d\x8b\xfe\x8a\xff\x7a\xd4\xf6\xf5\xfe\x7b\x98\x08\xf2\x39\xd0\xa7\xa7\x64\x7d\xc0\x4e\xa2\xaa\x86\xe5\x94\x25\x7f\x86\x73\xc1\x53\x5a\x5c\xe1\x2b\xbb\x1e\x49\xe4\x2d\xcc\x87\xc6\x71\x5e\x66\xe2\xe6\x2d\x66\xb9\x80\xac\x4c\x92\x23\x89\xba\xbf\x1a\xcd\xcd\xcb\x08\xf6\x4d\xbc\x29\xcd\x7f\xef\x4b\x5a\xb6\x8b\xf0\xbe\xd4\xa2\x93\xb5\x74\xf2\x41\xa9\x32\x28\x1d\xd6\x37\xe9\x40\xf0\x94\x5d\x04\x4d\xcf\xe2\xfb\x4a\xc0\x33\xfb\x42\xcb\x44\x40\x5c\x16\x05\x9b\xbc\x2e\xd0\x26\x83\x30\xe3\xaa\x91\xd6\x6e\x42\xde\x46\xeb\x23\xb7\x1f\x4d\x79\x7a\xa1\xeb\xd1\x48\xa7\x3a\xfd\x76\x8e\x35\xde\xd5\x3c\xc7\xca\x60\xad\xdc\x83\x11\xa1\x76\x46\xe1\x7e\x42\xc1\x9c\x7a\xa3\x5a\x69\x46\xf8\x85\xe3\x91\x44\xdb\x76\x82\x69\xc5\x09\xbd\x5c\x40\x77\x0e\xf4\xd0\x34\x01\xf9\xd3\x74\x43\xbf\xc6\xff\x00\xb0\xc3\x7d\x66\xde\x03\x56\x5f\x7b\x60\xed\x7c\x31\x9c\x9f\x59\x41\x05\xcf\xb3\x79\x79\x42\xad\x76\x92\x0a\x7a\xe3\xd9\x46\xea\x0f\x1a\x1b\x08\x01\x9c\xf8\xcb\x0e\x71\x46\x6a\x2b\x2b\x9f\xb4\xb7\xe4\xe3\x09\x80\x60\x69\x5e\xfd\x06\xab\xb3\x70\x50\xe3\x0f\x39\x34\xee\xbd\xd5\xc9\xd3\x94\x8b\x27\xf2\x3f\x00\x00\xff\xff\x52\x59\x26\x17\xaf\x03\x00\x00")

func _000001_initialize_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initialize_schemaUpSql,
		"000001_initialize_schema.up.sql",
	)
}

func _000001_initialize_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initialize_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initialize_schema.up.sql", size: 943, mode: os.FileMode(0644), modTime: time.Unix(1605019281, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0xb5, 0xe3, 0xd8, 0xdb, 0x44, 0x63, 0xc5, 0xd6, 0x89, 0x69, 0x1, 0xf2, 0xb3, 0x76, 0x4b, 0xa, 0x78, 0x52, 0x62, 0xfc, 0x8d, 0x2c, 0x3c, 0xdd, 0x92, 0x3b, 0x39, 0xbf, 0x5a, 0x5d, 0x6c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initialize_schema.down.sql": _000001_initialize_schemaDownSql,
	"000001_initialize_schema.up.sql":   _000001_initialize_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initialize_schema.down.sql": &bintree{_000001_initialize_schemaDownSql, map[string]*bintree{}},
	"000001_initialize_schema.up.sql":   &bintree{_000001_initialize_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
