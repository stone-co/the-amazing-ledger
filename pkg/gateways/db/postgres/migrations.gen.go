// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_initialize_schema.down.sql (110B)
// migrations/000001_initialize_schema.up.sql (723B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initialize_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcd\x2b\x29\xca\x4c\x2d\xb6\x86\x8a\x45\x06\xb8\x2a\x28\xe4\x17\xa4\x16\x25\x96\x64\xe6\xe7\xc5\x97\x54\x16\xa4\x5a\x23\x2b\x4f\x4c\x4e\xce\x2f\xcd\x2b\x41\x55\x0f\x15\x84\xaa\xe6\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x00\xaf\xc8\x35\x6e\x00\x00\x00")

func _000001_initialize_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initialize_schemaDownSql,
		"000001_initialize_schema.down.sql",
	)
}

func _000001_initialize_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initialize_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initialize_schema.down.sql", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1600368179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x4a, 0x6d, 0xf3, 0xd4, 0x4f, 0x9f, 0xb1, 0xe, 0xa5, 0x3d, 0x3d, 0x9, 0xf9, 0x9c, 0x77, 0x57, 0x4c, 0x8f, 0xbb, 0x2c, 0x8e, 0xcc, 0x64, 0x72, 0x6f, 0xd2, 0x6a, 0x64, 0x5a, 0x1d, 0xed}}
	return a, nil
}

var __000001_initialize_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcd\x8e\x9b\x30\x14\x85\xd7\xf8\x29\xee\x2e\xad\xc4\x1b\x64\xe5\x10\x37\xb2\xca\x9f\x88\x91\x9a\x6e\x90\x03\xb7\x92\x55\x30\xd4\x98\xce\xf0\xf6\x23\x4c\x40\x0c\xc9\x78\x65\x74\x0e\xc7\xe7\x7e\xf7\xc4\x2e\x3c\x3e\x12\x12\x64\x8c\x0a\x06\xe2\x96\x32\x90\x65\xd9\x0e\xda\x16\x76\xec\x10\xe8\x15\x58\x9c\x47\xf0\x8d\x78\x07\xd9\xf7\x68\x0f\x3e\xf1\x0e\xb5\x92\x77\x55\x2b\x3b\xba\x2f\xa5\xcb\xb6\x41\x77\xc5\xf7\x0e\x75\xff\xb8\xff\x1b\x26\x07\xf9\xbe\xc9\xa7\xa7\x70\x7d\xa0\x9f\x42\x55\x05\xcb\xc9\x73\x7e\x86\x34\xe3\x11\xcd\x6e\xf0\x93\xdd\x7c\xe2\xb9\x0a\xf3\xa1\x41\x90\xe4\xb1\x28\x5c\xc5\x38\x11\x10\xe7\x61\xe8\x13\xaf\x7d\xd3\x68\x0a\x17\x23\xd8\x2f\xf1\x24\xcd\x7f\xef\x25\x2d\x9b\x25\x78\x2f\x35\x68\x65\x25\xad\x7c\x21\x95\x06\xa5\xc5\xaa\x90\x16\x04\x8f\xd8\x55\xd0\x28\x15\xbf\x57\x07\x9c\xd9\x0f\x9a\x87\x02\x82\x3c\xcb\xd8\xd4\x75\x31\x7d\x62\x30\x0d\xd0\x76\x68\xa4\x55\xad\x7e\xa6\x5c\xe1\x5d\xcd\x94\x4b\x83\x95\xb2\x2f\x00\xa2\xb6\x46\xe1\x9e\xdf\xca\xb0\x33\xaa\x91\x66\x84\xbf\x38\xfa\xc4\x5b\xd6\xf9\x70\x3a\x87\x6e\x2d\xe8\xa1\xae\x27\x48\x4b\x93\x39\x20\x49\x59\x46\x05\x4f\xe2\x19\xf4\xc6\x28\x9b\x29\x66\x7d\x89\xc7\x62\xab\xfe\x47\xd3\xaf\x21\x00\x27\x7e\xd9\x19\xac\x91\xba\x97\xa5\x9b\x59\x55\x4f\x35\x36\x68\xdd\x52\x36\x78\x17\x17\x54\xf8\x47\x0e\xb5\xfd\x0a\x6f\x12\x45\x5c\x1c\xc9\x47\x00\x00\x00\xff\xff\xb6\x2f\x98\x6e\xd3\x02\x00\x00")

func _000001_initialize_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initialize_schemaUpSql,
		"000001_initialize_schema.up.sql",
	)
}

func _000001_initialize_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initialize_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initialize_schema.up.sql", size: 723, mode: os.FileMode(0644), modTime: time.Unix(1600386423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x27, 0xd7, 0xd8, 0xc4, 0x25, 0xb8, 0x1b, 0xa, 0x15, 0x88, 0x53, 0x84, 0xca, 0xb6, 0x51, 0x20, 0x57, 0xd5, 0x20, 0x7d, 0x4, 0xbc, 0x5c, 0xf6, 0x53, 0x32, 0x37, 0xb4, 0x54, 0xdc, 0x17}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initialize_schema.down.sql": _000001_initialize_schemaDownSql,
	"000001_initialize_schema.up.sql":   _000001_initialize_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initialize_schema.down.sql": &bintree{_000001_initialize_schemaDownSql, map[string]*bintree{}},
	"000001_initialize_schema.up.sql":   &bintree{_000001_initialize_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
