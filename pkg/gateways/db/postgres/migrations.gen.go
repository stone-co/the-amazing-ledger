// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_create_accounts_table.down.sql (55B)
// migrations/000001_create_accounts_table.up.sql (456B)
// migrations/20200810193124_create_transactions_table.down.sql (62B)
// migrations/20200810193124_create_transactions_table.up.sql (385B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_accounts_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x82\x48\x47\x06\xb8\xc2\xc4\xe2\x4b\x2a\x0b\x52\xad\xb9\x00\x01\x00\x00\xff\xff\x55\x3c\xd0\xc9\x37\x00\x00\x00")

func _000001_create_accounts_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_accounts_tableDownSql,
		"000001_create_accounts_table.down.sql",
	)
}

func _000001_create_accounts_tableDownSql() (*asset, error) {
	bytes, err := _000001_create_accounts_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_accounts_table.down.sql", size: 55, mode: os.FileMode(0664), modTime: time.Unix(1596737464, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x27, 0x2d, 0x65, 0x0, 0x52, 0xf9, 0x55, 0xab, 0xf, 0x31, 0x13, 0xa3, 0xbd, 0x11, 0x88, 0x3f, 0x23, 0xc3, 0x49, 0xdb, 0xc9, 0xc9, 0xd1, 0x60, 0x99, 0xfc, 0xc8, 0xa8, 0xba, 0x86, 0xdb}}
	return a, nil
}

var __000001_create_accounts_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6b\xc3\x30\x14\x84\x77\xfd\x8a\x23\x4b\x12\xc8\xd0\xbd\xb4\xa0\x3a\x2f\x44\xc4\x56\x82\x2c\xd1\xa6\x8b\x50\x6c\x0d\x82\xc4\x36\xb1\xd2\x36\xff\xbe\xd8\xe0\x50\xe3\xa1\x9b\xde\xbd\xbb\x8f\x13\x2f\x51\xc4\x35\x41\x1f\x0f\x04\x57\x14\xf5\xad\x8a\x36\xde\x1b\x0f\x9e\x83\xa4\xc9\xb0\x60\xc0\xdc\xb5\xad\x8f\xf3\x55\xf7\x3c\x07\x77\x0a\xe7\x10\xef\x73\xb6\x7c\x66\x6c\xc8\xf3\xb7\x94\x20\x36\x90\x7b\x0d\xfa\x10\xb9\xce\x07\x5c\xdb\x23\x42\x09\x63\xc4\x1a\x07\x25\x32\xae\x8e\xd8\xd1\xb1\xf7\x4a\x93\xa6\x1d\xb7\xfe\xae\xfc\x15\xd1\xff\xc4\x91\x5c\xb9\x8b\x9f\xaa\xbd\xd9\x86\x72\xba\x99\x75\xdd\x67\xe3\x9f\xfc\xdd\x5f\x7c\x74\xa5\x8b\x0e\x76\x12\x3d\xb9\xb3\xab\x0a\x8f\x50\x8d\xf5\xe2\xea\x5d\xf4\xa5\x75\x11\x5a\x64\x94\x6b\x9e\x1d\xf0\x2e\xf4\xb6\x1f\xf1\xb9\x97\xf4\xf0\x63\x4d\x1b\x6e\x52\x8d\xc4\x28\x45\x52\xdb\x47\xa2\x23\xdd\x9a\xf2\x3f\xd2\x8a\x31\x20\xd9\xcb\x5c\x2b\x2e\xa4\x46\x53\xb7\x21\x86\x2f\x6f\x87\x76\xc9\x96\x92\x1d\x16\xc3\xf8\xfa\x82\xa7\x65\x77\x88\xdf\x00\x00\x00\xff\xff\xb2\x3c\x73\xba\xc8\x01\x00\x00")

func _000001_create_accounts_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_accounts_tableUpSql,
		"000001_create_accounts_table.up.sql",
	)
}

func _000001_create_accounts_tableUpSql() (*asset, error) {
	bytes, err := _000001_create_accounts_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_accounts_table.up.sql", size: 456, mode: os.FileMode(0664), modTime: time.Unix(1596803776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xc1, 0xbc, 0x43, 0x75, 0x89, 0x5b, 0x2c, 0x2b, 0x1c, 0xdc, 0x62, 0xe1, 0x6f, 0xca, 0xfc, 0xf7, 0x6b, 0xbb, 0x39, 0x94, 0x97, 0x64, 0x48, 0x71, 0xa5, 0xec, 0x29, 0xc6, 0xcc, 0x7, 0x6f}}
	return a, nil
}

var __20200810193124_create_transactions_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\xb6\xe6\x82\x28\xa9\x2c\x48\x45\x16\x8f\x07\x09\x58\x03\x02\x00\x00\xff\xff\xc5\x5c\xb2\x84\x3e\x00\x00\x00")

func _20200810193124_create_transactions_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200810193124_create_transactions_tableDownSql,
		"20200810193124_create_transactions_table.down.sql",
	)
}

func _20200810193124_create_transactions_tableDownSql() (*asset, error) {
	bytes, err := _20200810193124_create_transactions_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200810193124_create_transactions_table.down.sql", size: 62, mode: os.FileMode(0664), modTime: time.Unix(1597099605, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0x76, 0x3, 0x84, 0x8e, 0x77, 0x61, 0xbf, 0xae, 0x7b, 0xc6, 0x8d, 0x3d, 0xb2, 0x9f, 0x67, 0x64, 0x99, 0x46, 0xb8, 0x6d, 0xa5, 0xa8, 0x96, 0xdf, 0x44, 0x72, 0x98, 0xfe, 0x36, 0xd2, 0x58}}
	return a, nil
}

var __20200810193124_create_transactions_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6a\xc4\x30\x0c\x45\xd7\xf1\x29\x3e\xb3\x49\x07\x72\x83\x39\x4c\x50\x6c\x05\x44\x1d\xc7\x95\x25\x98\xf4\xf4\x25\x09\x1d\x52\x3a\x3b\xa3\xef\xf7\xa4\x1f\x95\xc9\x18\xb6\x55\x86\x29\x95\x46\xd1\x64\x2d\xe3\x31\xa0\x06\x2e\xbe\xe0\x23\x00\x7d\x54\x4e\x62\xfd\xb0\xbf\x13\x4f\x62\x7d\xb8\x3f\x42\x08\xbf\x06\x9a\x32\x43\x66\x94\xd5\xc0\x4f\x69\xd6\xae\xc2\x76\x48\x00\x49\x70\x97\x84\xaa\xb2\x90\x6e\xf8\xe4\x6d\x08\x1d\xc5\xb8\x7a\xb1\x51\x12\x8c\x9f\x76\x38\x8a\xe7\x3c\x84\x6e\xad\xac\x74\x9c\xf4\x26\x54\xfe\x72\x6e\x17\xee\x1c\xdf\xf6\xeb\x6f\xff\xfb\x5c\x48\x5a\xf6\x85\x90\xf2\xc7\x37\x51\xa6\x12\x79\xa4\xd9\x58\xcf\xf0\x0c\xce\x92\x69\x24\x83\xc9\xc2\xcd\x68\xa9\xf6\xfd\x42\x91\x78\x26\xcf\x86\xe8\xaa\x5c\x6c\x7c\x7d\x1a\x42\xe7\x35\xbd\x65\x3d\xe7\x70\x7f\xfc\x04\x00\x00\xff\xff\x0d\xfa\xb1\xb0\x81\x01\x00\x00")

func _20200810193124_create_transactions_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200810193124_create_transactions_tableUpSql,
		"20200810193124_create_transactions_table.up.sql",
	)
}

func _20200810193124_create_transactions_tableUpSql() (*asset, error) {
	bytes, err := _20200810193124_create_transactions_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200810193124_create_transactions_table.up.sql", size: 385, mode: os.FileMode(0664), modTime: time.Unix(1597099571, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x43, 0x2, 0x1c, 0x95, 0x99, 0x95, 0xe1, 0x56, 0x41, 0x20, 0x6f, 0x61, 0x45, 0xbe, 0xf2, 0xc0, 0x6d, 0xde, 0x9f, 0x11, 0xef, 0xfe, 0xb4, 0x3, 0xbd, 0xa5, 0x76, 0x46, 0x66, 0x7a, 0xda}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_accounts_table.down.sql":             _000001_create_accounts_tableDownSql,
	"000001_create_accounts_table.up.sql":               _000001_create_accounts_tableUpSql,
	"20200810193124_create_transactions_table.down.sql": _20200810193124_create_transactions_tableDownSql,
	"20200810193124_create_transactions_table.up.sql":   _20200810193124_create_transactions_tableUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_accounts_table.down.sql":             &bintree{_000001_create_accounts_tableDownSql, map[string]*bintree{}},
	"000001_create_accounts_table.up.sql":               &bintree{_000001_create_accounts_tableUpSql, map[string]*bintree{}},
	"20200810193124_create_transactions_table.down.sql": &bintree{_20200810193124_create_transactions_tableDownSql, map[string]*bintree{}},
	"20200810193124_create_transactions_table.up.sql":   &bintree{_20200810193124_create_transactions_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
