syntax = "proto3";

option go_package = "github.com/stone-co/the-amazing-ledger/pkg/rpc/proto";

package proto;
import "google/protobuf/empty.proto";

service LedgerService {
  rpc SaveTransaction(SaveTransactionRequest) returns (google.protobuf.Empty);
  rpc GetAccountBalance(GetAccountBalanceRequest) returns (GetAccountBalanceResponse);
}

// SaveTransactionRequest represents a transaction to be saved. A transaction must
// have at least two entries, with a valid balance. More info here:
// https://en.wikipedia.org/wiki/Double-entry_bookkeeping
message SaveTransactionRequest {
  // ID (UUID) to link the entries to a transaction.
  string id = 1;
  // The list of entries, where len(entries) must be >= 2.
  repeated Entry entries = 2;
}

// Entry represents a new entry on the Ledger.
message Entry  {
  // It's the idempotency key, and must be unique (UUID).
  string id = 1;
  // Account involved in the operation.
  string account_id = 2;
  // To deal with optimistic lock.
  uint64 expected_version = 3;
  // Operation: debit or credit.
  Operation operation = 4;
  // Amount (in cents).
  int32 amount = 5;
}

// Operation has the possible operations to be used in Entry.
enum Operation {
  // Don't use. It's just the default value.
  OPERATION_UNSPECIFIED = 0;
  // Debit operation.
  OPERATION_DEBIT = 1;
  // Credit operation.
  OPERATION_CREDIT = 2;
};

// Input account id used like a key
message GetAccountBalanceRequest {
  string account_path = 1; // Represents an account.
}

// Output used to represnet version and balance from an account.
message GetAccountBalanceResponse {
  string account_path = 1; // Represents an account.
  uint64 current_version = 2; // To deal with optimistic lock.
  int32 total_credit = 3; // Total credit in cents
  int32 total_debit = 4; // Total debit in cents
  int32 balance = 5; // Difference between total_credit and total_debit
}
