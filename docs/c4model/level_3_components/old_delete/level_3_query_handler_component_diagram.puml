@startuml Basic Sample
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Component.puml

title Component diagram for Query Handler API - Ledger system

System_Ext(transactional_systems, "Transactional systems", "Uses the ledger during transactional operations")
Container(ledger_command_api, "Ledger Command API", "Golang exporting RPC and Rest APIs", "Allows systems to save transactions related to accounts")
Container(ledger_pub_service, "Ledger Publisher service", "Golang exporting RPC", "Allows systems to reveice account events throw Message Bus")

ContainerDb(query_database, "Query Database", "Postgres Database", "Stores operations related to accounts")

Container_Boundary(ledger, "Ledger Query API") {
    Component(query_controller, "Query controller", "Get information related to accounts", "Get balance and history")
    Component(event_controller, "Event controller", "Validates and save events", "Checks for duplicated events")
    Component(write_storage_controller, "Write storage controller", "Saves events into the storage")
    Component(query_storage_controller, "Read storage controller", "Reads events into the storage")
    Component(notifier_controller, "Notifier controller", "Sends account events to all registered query handlers")
    Rel(query_controller, query_storage_controller, "Uses")
    Rel(event_controller, write_storage_controller, "Uses")
    Rel(write_storage_controller, notifier_controller, "Uses")
    Rel(query_storage_controller, query_database, "Read")
    Rel(write_storage_controller, query_database, "Read & write to")
}

Rel(ledger_command_api, event_controller, "Sends events related to the accounts", "RPC/HTTPS")

Rel(transactional_systems, query_controller, "Gets events related to accounts", "RPC/HTTPS")
Rel(notifier_controller, ledger_pub_service, "Sends events related to the accounts", "RPC/HTTPS")

@enduml
